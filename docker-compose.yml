# Docker Compose file version
version: '3.8'

# Define all the services (containers) that make up the application
services:
  # 1. Frontend Service (React/Vue served by Nginx)
  frontend:
    build: ./frontend
    container_name: marketplace-frontend
    ports:
      - "3000:80" # Map host port 3000 to container port 80 (Nginx)
    depends_on:
      - backend

  # 2. Backend Service (Node.js)
  backend:
    build: ./backend
    container_name: marketplace-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/marketplace
      - SEARCH_AI_URL=http://search-ai:8000 # URL to communicate with the Search AI service
    depends_on:
      - db
      - search-ai

  # 3. PostgreSQL Database for the Backend
  db:
    image: postgres:13-alpine
    container_name: marketplace-db
    environment:
      - POSTGRES_DB=marketplace
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # 4. GenAI Service (Python/Uvicorn)
  genai-services:
    build: ./genai-services
    container_name: marketplace-genai
    ports:
      - "8001:8000" # Map host port 8001 to container port 8000
    restart: unless-stopped

  # 5. Search AI Service (Python/Gunicorn)
  search-ai:
    build: ./search-ai
    container_name: marketplace-search-ai
    ports:
      - "8002:8000" # Map host port 8002 to container port 8000
    environment:
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379/0
      # Add any other required environment variables for search-ai here
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # 6. Qdrant Vector Database (Dependency for Search AI)
  qdrant:
    image: qdrant/qdrant:v1.12.3
    container_name: searchai-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 7. Redis Cache (Dependency for Search AI)
  redis:
    image: redis:7.2-alpine
    container_name: searchai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

# Define named volumes for persistent data storage
volumes:
  postgres_data:
  qdrant_storage:
  redis_data: